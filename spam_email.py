# -*- coding: utf-8 -*-
"""spam email.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A0weZEd4QfMoUERbbSq8-NU_9rYPi3MN

importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""data collection and pre processing"""

# loading the data from csv file to a pandas dataframe
raw_mail_data=pd.read_csv('/content/mail_data.csv')

print(raw_mail_data)

#replace the null values with a null string
mail_data = raw_mail_data.where(pd.notnull(raw_mail_data),'')

#print fisrt 5 raw of the data
mail_data.head()

#checking number of raw and colums

mail_data.shape

# label spam mail as 0 and hams as 1

mail_data.loc[mail_data['Category']=='spam','category',]=0
mail_data.loc[mail_data['Category']=='ham','category',]=1

"""spam =0
ham =1
"""

x= mail_data['Message']

y =mail_data['category']

print(x)

print(y)

"""spliting data into testing and test data"""

x_train, x_test , y_train, y_test = train_test_split(x ,y,test_size=0.2,random_state=3 )

print(x.shape)
print(x_train.shape)
print(.shape)

"""feature extraction"""

# tranform the text data to feature vector that can be used as input to the logic regression

feature_extraction= TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)

x_train_features=feature_extraction.fit_transform(x_train)
x_testfeatures=feature_extraction.transform(x_test)

# convert y_train and y_test values as integers


y_train = y_train.astype('int')
y_test =y_test.astype('int')

print(x_train)

print(x_train_features)

"""Training the model

Logistic regression
"""

model =LogisticRegression()

model.fit(x_train_features, y_train)

#prediction on training data
prediction_on_training_data=model.predict(x_train_features)
accuracy_on_training_data= accuracy_score(y_train,prediction_on_training_data)

print('Accuracy on training data :',accuracy_on_training_data)

"""buiding a prediction system"""

input_mail=["I know you are. Can you pls open the back?"]

# convert test to feature vector

input_data_features = feature_extraction.transform(input_mail)

#making prediction

prediction= model.predict(input_data_features)

print(prediction)

if (prediction[0]==1):
  print('Ham mail')

else:
  print('Spam mail')

